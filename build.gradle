// Works with Gradle 5.7 and Java 12

// To run this do:
// ./gradlew run

// To build a distribution zip:
// ./gradlew distZip

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id "org.beryx.jlink" version "2.22.3"

}
sourceCompatibility = 11
targetCompatibility = 11

version = '0.0.1'
group = 'whatweb'

java {
    modularity.inferModulePath.set(true)


}

application {
    mainModule = 'whatweb' // name defined in module-info.java
    mainClass = 'whatweb.App'
}



// ext.moduleName = 'gradlejavafxhelloworld'
mainClassName = "$moduleName/whatweb.App"



javafx {
    version = "12"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.web']
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'junit:junit:4.12'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.32.3.2'

//    implementation "de.jensd:fontawesomefx-fontawesome:11.0", {
//        exclude group: 'org.openjfx'
//    }

    implementation fileTree(dir: 'libs', include: ['*.jar'])

}

repositories {
    jcenter()
    mavenCentral()
}

jlink {
    addExtraDependencies("javafx")

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        name = 'whatwebfx'

        jvmArgs = [
                "--add-opens", "javafx.graphics/javafx.css=de.jensd.fx.fontawesomefx.commons"
        ]
    }
    /*
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        name = 'hello'
        jvmArgs = ['-Dlog4j.configurationFile=./log4j2.xml']
    }*/

    jpackage {
        jpackageHome = "/home/ena/.sdkman/candidates/java/14.0.2.fx-zulu"

        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']

        }
    }


}



def newArgs = [ '--add-exports','java.desktop/com.apple.eawt=ALL-UNNAMED',
                '--add-opens', 'javafx.graphics/javafx.css=de.jensd.fx.fontawesomefx.commons',]
run {
    inputs.property('moduleName', moduleName)
    doFirst {
        jvmArgs = jvmArgs.plus(newArgs)
        jvmArgs = jvmArgs.plus(['--module-path', classpath.asPath,
                                '--patch-module', "$moduleName=" + files(sourceSets.main.output.resourcesDir).asPath,
                                '--module', "$mainClassName",
        ])
        classpath = files()
    }
}



run {
    standardInput = System.in
}


